package Dancer2::Manual::Migration;

use strict;
use warnings;

1;

__END__

=pod

=head2 Migration from Dancer1 to Dancer2

This document covers some changes that users will need to be aware of
while upgrading from Dancer1 to Dancer2.

=head3 Apps

1. In Dancer2, each module is a B<separate application> with its own
namespace and variables. You can set the application name in each of your
Dancer2 application modules. Different modules can be tied into the same
app by setting the application name to the same value.

For example, to set the appname directive explicitly:

    package myapp;
    use Dancer2;
    use myapp::admin;

    hook before => sub {
        var db => "...";
    };

    prefix undef;
    get '/' => sub {...};

    1;

    package myapp::admin;
    use Dancer2 appname => "myapp";

    prefix '/admin';
    get '/' => sub {...};

    1;

Without the appname directive, C<myapp::admin> would not have access
to C<var db{}>. In fact, when accessing C</admin>, the before hook would
not be executed.

See L<Dancer2::Cookbook|https://metacpan.org/pod/Dancer2::Cookbook#Using-the-prefix-feature-to-split-your-application>
for details.

2. The following modules can be used to speed up an app in Dancer2:

=over 4

=item * L<URL::Encode::XS|https://metacpan.org/pod/URL::Encode::XS> 

=item * L<CGI::Deurl::XS|https://metacpan.org/pod/CGI::Deurl::XS>

=item * L<HTTP::Parser::XS|https://metacpan.org/pod/HTTP::Parser::XS>

=back

They would need to be installed separately. This is because Dancer2 does
not incorporate any C code, but it can get C-code compiled as a module.
Thus, these modules can be used for speed improvement provided:

=over 4

=item * You have access to a C interpreter

=item * You don't need to fatpack your application

=back

=head3 Plugins: plugin_setting

B<plugin_setting> returns the configuration of the plugin. It can no
longer be called outside of C<register> or C<on_plugin_import>.

=head3 Routes

Dancer2 requires all routes defined via a string to begin with a leading
slash C</>.

For example: 

    get '0' => sub {
        return "not gonna fly";
    };

would return an error. The correct way to write this would be to use
C<get '/0'>

