package Dancer2::Manual::Hooks;

# ABSTRACT: Reference manual for all hooks supported by Dancer2's core.

=pod

This manual documents all the hooks that are supported by the core framework.

=head2 Request workflow

C<before> hooks are evaluated before each request within the context of the
request and receives as argument the context (a L<Dancer2::Core::Context>
object).

It's possible to define variables which will be accessible in the action blocks
with the keyword 'var'.

    hook before => sub {
        var note => 'Hi there';
        request->path_info('/foo/oversee')
    };

    get '/foo/*' => sub {
        my ($match) = splat; # 'oversee';
        vars->{note}; # 'Hi there'
    };

For another example, this can be used along with session support to easily
give non-logged-in users a login page:

    hook before => sub {
        if (!session('user') && request->path_info !~ m{^/login}) {
            # Pass the original path requested along to the handler:
            var requested_path => request->path_info;
            request->path_info('/login');
        }
    };

The request keyword returns the current L<Dancer2::Core::Request> object
representing the incoming request.

C<after> hooks are evaluated after the response has been built by a route
handler, and can alter the response itself, just before it's sent to the
client.

This hook runs after a request has been processed, but before the response is
sent.

It receives a L<Dancer2::Core::Response> object, which it can modify
if it needs to make changes to the response which is about to be sent.

The filter is given the response object as its first argument:

    hook after => sub {
        my $response = shift;
        $response->(content, 'after filter got here!');
    };

=head2 Templates

C<before_template_render> hooks are called whenever a template is going to be
processed, they are passed the tokens hash which they can alter.

    hook before_template_render => sub {
        my $tokens = shift;
        $tokens->{foo} = 'bar';
    }

The tokens hash will then be passed to the template with all the modifications
performed by the filter. This is a good way to setup some global vars you like
to have in all your templates, like the name of the user logged in or a
section name.

C<after_template_render> hooks are called after the view has been rendered. They
receive as their first argument the reference to the content that has been
produced. This can be used to post-process the content rendered by the template
engine.

    hook after_template_render => sub {
        my $ref_content = shift;
        my $content = $$ref_content;
        # do something with $content
        $ref_content = \$content;
    };

C<before_layout_render> hooks are called whenever the layout is going to be
applied to the current content. The arguments received by the hook are the
current tokens hashref and a reference to the current content.

    hook before_layout_render => sub {
        my ($tokens, $ref_content) = @_;
        $tokens->{new_stuff} = 42;
        $ref_conent = \"new content";
    };

C<after_layout_render> hooks are called once the complete content of the view
has been produced, after the layout has been applied to the content. The
argument received by the hook is a reference to the complete content string.

    hook after_layout_render => sub {
        my $ref_content = shift;
        ...
    };

=head2 Error handling

When an error is caught by Dancer2's core, an exception object is built (of the
class L<Dancer2::Core::Error>. This class provides hook to let the user alter
the error work-flow if needed.

C<init_error> hooks are called whenever an error object is built, the object is
passed to the hook.

    hook init_error => sub {
        my $error = shift;
        # do something with $error
    };

I<This hook was named B<before_error_init> in Dancer, and is now aliased to
this hook.>

C<before_error> hooks are called whenever an error is going to be thrown, it
receives the error object as its first and unique argument.

    hook before_error => sub {
        my $error = shift;
        # do something with $error
    };

I<This hook was named B<before_error_render> in Dancer, and is now aliased to
this hook.>

C<after_error> hooks are called whenever an error object has been thrown, it
receives a L<Dancer2::Core::Response> object as the first argument.

    hook after_error => sub {
        my $response = shift;
    };

I<This hook was named <after_error_render> in Dancer, and is now aliased to
this hook.>

C<on_route_exception> is called when an exception has been caught, at the
route level, just before rethrowing it higher. This hook receives a
L<Dancer2::Core::Context> and the error as arguments.

  hook on_route_exception => sub {
    my ($context, $error) = @_;
  };

=head2 File rendering

Whenever a content is produced out of the parsing of a static file, the
L<Dancer2::Handler::File> component is used. This component provides two hooks,
C<before_file_render> and C<after_file_render>.

C<before_file_render> hooks are called just before starting to parse the file,
the hook receives as its first argument the file path that is going to be
processed.

    hook before_file_render => sub {
        my $path = shift;
    };

C<after_file_render> are called after the file has been parsed and the response
content produced. It receives the response object (L<Dancer2::Core::Response>)
produced.

    hook after_file_render => sub {
       my $response = shift;
    };

=head2 Serializers

C<before_serializer> is called before serializing the content, and eceives as
argument the content to serialize.

  hook before_serializer => sub {
    my @data = @_;
    $response->content->{start_time} = time();
  };

C<after_serializer> is called after the payload was serialized, and receives
the serialized content as an argument.

  hook before_deserializer => sub {
    my $content = shift;
  };


